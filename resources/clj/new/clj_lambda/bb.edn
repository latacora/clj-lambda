{:paths ["."]
 :tasks
 {:init
  (do
    (def jar-file (format "%s/%s-%s.jar" "target" (name bs/lib) bs/version)))
  :requires ([babashka.fs :as fs]
             [build-shared :as bs])
  ;; Speedier uberjar from https://blog.michielborkent.nl/speeding-up-builds-fs-modified-since.html
  uber {:doc "Build uberjar"
        :task (let [src-dir "src"]
                (if (seq (fs/modified-since jar-file [src-dir]))
                  (clojure "-T:build uber")
                  (println "Uberjar is already up to date" jar-file)))}

  lambda-create
  {:doc "Creates a minimal lambda with a role to execute it and logging setup"
   :requires ([cheshire.core :as json]
              [again.core :as again])
   :extra-deps {listora/again {:mvn/version "1.0.0"}}
   :depends [uber]
   :task (let [policy {"Version" "2012-10-17"
                       "Statement" [{"Effect" "Allow" "Principal" {"Service" "lambda.amazonaws.com"} "Action" "sts:AssumeRole"}]}
               role-arn (-> (shell {:out :string}
                                   "aws iam create-role --role-name {{name}} --assume-role-policy-document"
                                   (json/generate-string policy))
                            :out
                            json/parse-string
                            (get-in ["Role" "Arn"]))]
           (shell "aws iam attach-role-policy --role-name {{name}} --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole")
           ;; Retries because role needs time to create. When role isn't created
           ;; we see the error 'The role defined for the function cannot be
           ;; assumed by Lambda.'
           (again/with-retries
            [5000 10000]
            (shell (format
                    "aws lambda create-function --function-name {{name}} --zip-file fileb://%s --role %s --runtime java11 --memory-size 256 --handler {{namespace}}.handler"
                    jar-file
                    role-arn))))}

  lambda-update
  {:doc "Updates lambda with latest code uberjared"
   :depends [uber]
   :task (shell (str "aws lambda update-function-code --function-name {{name}} --zip-file fileb://" jar-file))}

  lambda-invoke
  {:doc "Invoke lambda with given edn event"
   :requires ([cheshire.core :as json]
              [clojure.edn :as edn])
   :task (shell "aws lambda invoke --cli-binary-format raw-in-base64-out --function-name baz --payload"
                (json/generate-string (edn/read-string (first *command-line-args*)))
                "/dev/stdout")}}}
